package xyz.sethy.cd.gui;

import org.lwjgl.opengl.GL11;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.client.event.RenderGameOverlayEvent;
import net.minecraftforge.client.event.RenderGameOverlayEvent.ElementType;
import net.minecraftforge.event.EventPriority;
import net.minecraftforge.event.ForgeSubscribe;
import xyz.sethy.cd.extended.ExtendedPlayer;

@SideOnly(Side.CLIENT)
public class WaterGUI extends Gui {
	private static final ResourceLocation resourceLocation = new ResourceLocation("CD", "	water_bar.png");
	private final float waterLossPerBlock = 0.09f;
	
	private int lastX = Integer.MAX_VALUE;
	private int lastZ = Integer.MAX_VALUE;
	
	public WaterGUI() {
		super();
	}
	
	@ForgeSubscribe(priority = EventPriority.NORMAL)
	public void onRenderGameOverlay(final RenderGameOverlayEvent event) {
		if (event.isCancelable() || event.type != ElementType.EXPERIENCE)
			return;
		
		
		ExtendedPlayer player = ExtendedPlayer.get((EntityPlayer) Minecraft.getMinecraft().thePlayer);
		
		if (player == null) {
			return;
		}
		EntityPlayer entityPlayer = (EntityPlayer) Minecraft.getMinecraft().thePlayer;

		doPlayerLocationChecks(entityPlayer);
		
		// Assign as a local variable, to save latency getting from another class.
		float waterLevel = player.getCurrentWaterLevel();
		
		// Send a message to a player every time they're water level gets to a multiple of 3.
		if ((waterLevel % 3) == 1) {
			// Send a message to the player alerting them of their water level getting low.
			entityPlayer.addChatMessage("You are becoming lower on water, consider having something to drink.");
		}
		
		if (player.getCurrentWaterLevel() < 0) {
			return;
		}
		
		// Assign the xPos local variable to 2
		int xPos = 2;
		// Assign the yPos local variable to 2
		int yPos = 2;
		
		// Sets the openGL colour, of 4f to the red, blue, green, and alpha values to 1.0F, within this current GUI
		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
		// Disables the openGL lighting feature inside of the current GUI
		GL11.glDisable(GL11.GL_LIGHTING);
		
		// Bind the texture of this GUI to the resourceLocation static variable
		Minecraft.getMinecraft().getTextureManager().bindTexture(resourceLocation);
		
		// Assign the waterBarWidth to the values of both of the currentWaterLevel, and the maxWaterLevel values, and them multiplied by 101
		int waterBarWidth = (int)((player.getCurrentWaterLevel() / player.getMaxWaterLevel()) * 101);
		Minecraft.getMinecraft().getLogAgent().logInfo("water bar width = " + waterBarWidth);
		// Draws this current GUI at the previously assigned locations, xPos, and yPos, however yPos is incremented by 1.
		this.drawTexturedModalRect(xPos, yPos + 1, 0, 4, waterBarWidth, 2);
	}
	
	
	private void doPlayerLocationChecks(EntityPlayer player) {
		// Creates a local variable called x which is assigned to the players current x coordinate
		int x = player.getPlayerCoordinates().posX;
		// Creates a local variable called z which is assigned to the players current z coordinate
		int z = player.getPlayerCoordinates().posZ;
		
		// Checks if the lastX and lastZ variables are currently assigned the Integer.MAX_VALUE
		if (lastX == Integer.MAX_VALUE && lastZ == Integer.MAX_VALUE) {
			// Assigns the lastX variable to the local x variable
			lastX = x;
			// Assigned the lastZ variable to the local z variable
			lastZ = z;
			// Returns to the last executed line of the code (before this function was called) (It's a function as it modifies data)
			return;
		}
		
		// Checks if the lastX and lastZ equals there current counterparts (Checks if the player has moved since statement was last called)
		if (lastX == x && lastZ == z)
			return; // Will return the last executed line of code (before this function was called)
		
		// Assigned the movedX variable to the distance they have travelled across the X coordinates (Math.abs makes this integer positive if it is negative, makes it easier to work with later on)
		int movedX = Math.abs(lastX - x);
		int movedZ = Math.abs(lastZ - z);
		
		int movedTotal = movedX + movedZ;

		float waterUsed = movedTotal * waterLossPerBlock;
		
		ExtendedPlayer extendedPlayer = ExtendedPlayer.get(player);
		extendedPlayer.useWater(waterUsed);
		
		lastZ = z;
		lastX = x;
		Minecraft.getMinecraft().getLogAgent().logInfo("Current water level is " + extendedPlayer.getCurrentWaterLevel());
		
		Minecraft.getMinecraft().getLogAgent().logInfo(String.format("Player just lost %s water after travelling %s blocked", waterUsed, movedTotal));
	}
}
